Recipe 1.1: Testing the equivalence of two data structures

Problem: You have two data structures and want to ensure that they are equivalent. This often
occurs when you are unit testing the output of a function or a method that you are working on.

Test::More::is_deeply and Test::Deep::cmp_deeply() both handle this. Here's how they each act
when given

  #!/usr/bin/env perl

  use strict;
  use warnings;

  use Test::More;
  use Test::Deep;

  my @got       = (0, [1, 2, {hello => 'madison!'}, 3, [4, 5]]);
  my @expected  = (0, [2, 2, {goodnight => 'moon'}, 3, [5, 4]]);

  is_deeply( \@got, \@expected, 'Test::More::is_deeply' );
  cmp_deeply( \@got, \@expected, 'Test::Deep::cmp_deeply' );

  __END__
	not ok 1 - Test::More::is_deeply
	#   Failed test 'Test::More::is_deeply'
	#   at - line 12.
	#     Structures begin differing at:
	#          $got->[1][0] = '1'
	#     $expected->[1][0] = '2'
	not ok 2 - Test::Deep::cmp_deeply
	#   Failed test 'Test::Deep::cmp_deeply'
	#   at - line 14.
	# Compared $data->[1][0]
	#    got : '1'
	# expect : '2'

From a correctness standpoint this is fine for quickly detecting dissimilarity, but this
output doesn't aid the test-develop-test cycle much. During test-develop-test, you'll want
to know exactly how the two data structures are different.

There are a few solutions available out there, which probably indicates that this problem
just isn't very well solved yet. Here's the output from Test::Struct::deep_eq:

	not ok 1 - Test::Struct::deep_eq
	#   Failed test 'Test::Struct::deep_eq'
	#   at /home/blyman/code/test-cookbook/t/data-compare.t line 19.
	# at $got->[1]->[0] expecting value of "2" but got "1".
	# at %{$got->[1]->[2]} not expecting key "hello".
	# at %{$got->[1]->[2]} expecting key "goodnight".
	# at $got->[1]->[4]->[0] expecting value of "5" but got "4".
	# at $got->[1]->[4]->[1] expecting value of "4" but got "5".

Test::Differences::eq_or_diff provides a few different visualizations:

  eq_or_diff( \@got, \@expected, 'Test::Differences::eq_or_diff' );

  __END__
	not ok 1 - Test::Differences::eq_or_diff
	#   Failed test 'Test::Differences::eq_or_diff'
	#   at - line 12.
	# +----+---------------------------+----+---------------------------+
	# | Elt|Got                        | Elt|Expected                   |
	# +----+---------------------------+----+---------------------------+
	# |   0|[                          |   0|[                          |
	# |   1|  0,                       |   1|  0,                       |
	# |   2|  [                        |   2|  [                        |
	# *   3|    1,                     *    |                           |
	# |   4|    2,                     |   3|    2,                     |
	# |    |                           *   4|    2,                     *
	# |   5|    {                      |   5|    {                      |
	# *   6|      hello => 'madison!'  *   6|      goodnight => 'moon'  *
	# |   7|    },                     |   7|    },                     |
	# |   8|    3,                     |   8|    3,                     |
	# |   9|    [                      |   9|    [                      |
	# *  10|      4,                   *  10|      5,                   *
	# *  11|      5                    *  11|      4                    *
	# |  12|    ]                      |  12|    ]                      |
	# |  13|  ]                        |  13|  ]                        |
	# |  14|]                          |  14|]                          |
	# +----+---------------------------+----+---------------------------+

This is better, but the tabular diff layout doesn't scale well to very long or deeply nested pieces
of data. You can control the output to be either a contextual diff or a unified diff format; here's
each:

  context_diff;
  eq_or_diff( \@got, \@expected, 'eq_or_diff - context_diff' );

  unified_diff;
  eq_or_diff( \@got, \@expected, 'eq_or_diff - unified_diff' );

  __END__
	not ok 1 - eq_or_diff - context_diff
	#   Failed test 'eq_or_diff - context_diff'
	#   at - line 13.
	# *** Got
	# --- Expected
	# ***************
	# *** 1,15 ****
	#   [
	#     0,
	#     [
	# -     1,
	#       2,
	#       {
	# !       hello => 'madison!'
	#       },
	#       3,
	#       [
	# !       4,
	# !       5
	#       ]
	#     ]
	#   ]
	# --- 1,15 ----
	#   [
	#     0,
	#     [
	#       2,
	# +     2,
	#       {
	# !       goodnight => 'moon'
	#       },
	#       3,
	#       [
	# !       5,
	# !       4
	#       ]
	#     ]
	#   ]
	not ok 2 - eq_or_diff - unified_diff
	#   Failed test 'eq_or_diff - unified_diff'
	#   at - line 16.
	# --- Got
	# +++ Expected
	# @@ -1,15 +1,15 @@
	#  [
	#    0,
	#    [
	# -    1,
	#      2,
	# +    2,
	#      {
	# -      hello => 'madison!'
	# +      goodnight => 'moon'
	#      },
	#      3,
	#      [
	# -      4,
	# -      5
	# +      5,
	# +      4
	#      ]
	#    ]
	#  ]

Personally I like the latter output more: it's compact, so scales well to large data structures; and there's less
eye tracking to see what the got- and expected-side data are.

If you have a favorite way of getting a nice diff of two data structures, please let me know.

For the rest of this talk, I'll be using this function to compare two data structures:

  sub deep_ok (&&;$) {
  	require Test::Differences;
  	Test::Differences::unified_diff;
  	Test::Differences::eq_or_diff(@_);
  }

